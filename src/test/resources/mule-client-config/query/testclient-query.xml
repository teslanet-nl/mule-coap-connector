<?xml version="1.0" encoding="UTF-8"?>
<!--
  #%L
  Mule CoAP Connector
  %%
  Copyright (C) 2019 - 2022 (teslanet.nl) Rogier Cobben
  
  Contributors:
      (teslanet.nl) Rogier Cobben - initial creation
  %%
  This program and the accompanying materials are made available under the
  terms of the Eclipse Public License 2.0 which is available at
  http://www.eclipse.org/legal/epl-2.0.
  
  This Source Code may also be made available under the following Secondary
  Licenses when the conditions for such availability set forth in the Eclipse
  Public License, v. 2.0 are satisfied: GNU General Public License, version 2
  with the GNU Classpath Exception which is
  available at https://www.gnu.org/software/classpath/license.html.
  
  SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
  #L%
  -->

<mule
	xmlns:validation="http://www.mulesoft.org/schema/mule/validation"
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
	xmlns:coap="http://www.teslanet.nl/schema/mule/coap"
	xmlns:java="http://www.mulesoft.org/schema/mule/java"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.teslanet.nl/schema/mule/coap http://www.teslanet.nl/schema/mule/coap/current/mule-coap.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/java http://www.mulesoft.org/schema/mule/java/current/mule-java.xsd">

	<description>Mule CoAP connector test application</description>

	<coap:udp-endpoint name="Udp_Endpoint"
		logCoapMessages="true">
		<coap:exchange-params maxRetransmit="0" />
	</coap:udp-endpoint>

	<coap:client-config name="config" host="127.0.0.1" path="/query/test" 
		throwExceptionOnErrorResponse="false">
		<coap:endpoint udpEndpoint="Udp_Endpoint" />
	</coap:client-config>
	
	<coap:client-config name="config-with-defaults" host="127.0.0.1" path="/query/test" 
		throwExceptionOnErrorResponse="false">
		<coap:endpoint udpEndpoint="Udp_Endpoint" />
		<coap:query-configs >
			<coap:query-config key="test1" value="one" />
			<coap:query-config key="test2" value="two" />
			<coap:query-config key="novalue1" />
		</coap:query-configs>
	</coap:client-config>

    <coap:response-handler name="handler" />

	<flow name="request-sync">
		<coap:request config-ref="config"
			requestCode="#[vars.code]" queryParams="#[vars.query]">
			<coap:request-payload><![CDATA[#[payload]]]></coap:request-payload>
		</coap:request>
	</flow>

	<flow name="request-sync-fixed">
		<coap:request config-ref="config"
			requestCode="#[vars.code]">
			<coap:query-params >
				<coap:query-param key="test3" value="three" />
				<coap:query-param key="test4" value="four" />
				<coap:query-param key="novalue2" />
			</coap:query-params>
			<coap:request-payload><![CDATA[#[payload]]]></coap:request-payload>
		</coap:request>
	</flow>

	<flow name="request-async">
		<coap:request-async config-ref="config" responseHandler="handler" 
			requestCode="#[vars.code]" queryParams="#[vars.query]">
			<coap:request-payload><![CDATA[#[payload]]]></coap:request-payload>
		</coap:request-async>
	</flow>

	<flow name="request-async-fixed">
		<coap:request-async config-ref="config" responseHandler="handler" 
			requestCode="#[vars.code]" >
			<coap:query-params >
				<coap:query-param key="test3" value="three" />
				<coap:query-param key="test4" value="four" />
				<coap:query-param key="novalue2" />
			</coap:query-params>
			<coap:request-payload><![CDATA[#[payload]]]></coap:request-payload>
		</coap:request-async>
	</flow>

	<flow name="request-sync-with-defaults">
		<coap:request config-ref="config-with-defaults"
			requestCode="#[vars.code]" queryParams="#[vars.query]">
			<coap:request-payload><![CDATA[#[payload]]]></coap:request-payload>
		</coap:request>
	</flow>

	<flow name="request-sync-fixed-with-defaults">
		<coap:request config-ref="config-with-defaults"
			requestCode="#[vars.code]">
			<coap:query-params >
				<coap:query-param key="test3" value="three" />
				<coap:query-param key="test4" value="four" />
				<coap:query-param key="novalue2" />
			</coap:query-params>
			<coap:request-payload><![CDATA[#[payload]]]></coap:request-payload>
		</coap:request>
	</flow>

	<flow name="request-async-with-defaults">
		<coap:request-async config-ref="config-with-defaults" responseHandler="handler" 
			requestCode="#[vars.code]" queryParams="#[vars.query]">
			<coap:request-payload><![CDATA[#[payload]]]></coap:request-payload>
		</coap:request-async>
	</flow>

	<flow name="request-async-fixed-with-defaults">
		<coap:request-async config-ref="config-with-defaults" responseHandler="handler" 
			requestCode="#[vars.code]">
			<coap:query-params >
				<coap:query-param key="test3" value="three" />
				<coap:query-param key="test4" value="four" />
				<coap:query-param key="novalue2" />
			</coap:query-params>
			<coap:request-payload><![CDATA[#[payload]]]></coap:request-payload>
		</coap:request-async>
	</flow>

	<flow name="listener-flow">
		<coap:response-listener	responseHandler="handler" />

		<java:new doc:name="New spy"
			class="nl.teslanet.mule.connectors.coap.test.utils.MuleEventSpy"
			constructor="MuleEventSpy(String)" target="spy">
			<java:args><![CDATA[#[{ arg0: "query-handler" }]]]></java:args>
		</java:new>
		<java:invoke doc:name="Invoke" instance="#[vars.spy]"
			class="nl.teslanet.mule.connectors.coap.test.utils.MuleEventSpy"
			method="event(Object)">
			<java:args><![CDATA[#[{ arg0: message }]]]></java:args>
		</java:invoke>
	</flow>

</mule>
